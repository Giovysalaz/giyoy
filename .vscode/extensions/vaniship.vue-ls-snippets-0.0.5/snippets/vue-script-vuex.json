{
	"vVuexBase": {
		"prefix": "vVuexBase",
		"body": [
			"import Vue from 'vue';",
			"import Vuex from 'vuex';",
			"",
			"Vue.use(Vuex);",
			"",
			"export const store = new Vuex.Store({",
			"\tstate: {",
			"\t\t${1:key}: ${2:value}",
			"\t}",
			"});"
		],
		"description": "Base for Vuex store"
  },
	"vNewVuexStore": {
		"prefix": "vNewVuexStore",
		"body": [
				"const ${1:store} = new Vuex.Store({",
				"\t${2:// ...}",
				"})"
		],
		"description": "const store = new Vuex.Store({ })"
	},
	"vVuexGetters": {
		"prefix": "vVuexGetters",
		"body": [
			"getters: {",
			"\tvalue: ${1:value} => {",
			"\t\treturn state.${1:value};",
			"\t}",
			"}"
		],
		"description": "vuex getter"
	},
	"vVuexMutations": {
		"prefix": "vVuexMutations",
		"body": [
			"mutations: {",
			"\t${1:updateValue}(state, ${3:payload}) {",
			"\t\tstate.${2:value} = ${3:payload};",
			"\t}",
			"}"
		],
		"description": "vuex mutation"
	},
	"vVuexAction": {
		"prefix": "vVuexAction",
		"body": [
			"actions: {",
			"\t${1:updateValue}({commit}, ${2:payload}) {",
			"\t\tcommit(${1:updateValue}, ${2:payload});",
			"\t}",
			"}"
		],
		"description": "vuex action"
  },
	"vVuexCommitInMutation": {
    "prefix": "vVuexCommitInMutation",
    "body": [
      "${1:mutationName}() {",
      "\tthis.\\$store.commit('${1:mutationName}', ${2:payload})",
      "}"
    ],
    "description": "commit to vuex store in methods for mutation"
  },
  "vVuexDispatchInAction": {
    "prefix": "vVuexDispatchInAction",
    "body": [
      "${1:actionName}() {",
      "\tthis.\\$store.dispatch('${1:actionName}', ${2:payload})",
      "}"
    ],
    "description": "dispatch to vuex store in methods for action"
	},
	"vVuexImport": {
		"prefix": "vVuexImport",
		"body": [
			"import { store } from './store/store';"
		],
		"description": "import vuex store into main.js"
	},
	"vImportGSAP": {
    "prefix": "vImportGSAP",
    "body": ["import { TimelineMax, ${1:Ease} } from 'gsap'"],
    "description":
      "component methods options that dispatch an action from vuex store."
	},
	"state": {
    "prefix": "state",
    "body": [
      "state"
    ],
    "description": "just a word"
  },
  "getters": {
    "prefix": "getters",
    "body": [
      "getters"
    ],
    "description": "just a word"
  },
  "mutations": {
    "prefix": "mutations",
    "body": [
      "mutations"
    ],
    "description": "just a word"
  },
  "actions": {
    "prefix": "actions",
    "body": [
      "actions"
    ],
    "description": "just a word"
  },
  "modules": {
    "prefix": "modules",
    "body": [
      "modules"
    ],
    "description": "just a word"
  },
  "plugins": {
    "prefix": "plugins",
    "body": [
      "plugins"
    ],
    "description": "just a word"
  },
	"commit": {
    "prefix": "commit",
    "body": [
      "commit"
    ],
    "description": "just a word"
  },
  "dispatch": {
    "prefix": "dispatch",
    "body": [
      "dispatch"
    ],
    "description": "just a word"
  },
  "replaceState": {
    "prefix": "replaceState",
    "body": [
      "replaceState"
    ],
    "description": "just a word"
  },
  "subscribe": {
    "prefix": "subscribe",
    "body": [
      "subscribe"
    ],
    "description": "just a word"
  },
  "registerModule": {
    "prefix": "registerModule",
    "body": [
      "registerModule"
    ],
    "description": "just a word"
  },
  "unregisterModule": {
    "prefix": "unregisterModule",
    "body": [
      "unregisterModule"
    ],
    "description": "just a word"
  },
  "hotUpdate": {
    "prefix": "hotUpdate",
    "body": [
      "hotUpdate"
    ],
    "description": "just a word"
  },
	"mapState": {
    "prefix": "mapState",
    "body": [
      "mapState"
    ],
    "description": "just a word"
  },
  "mapGetters": {
    "prefix": "mapGetters",
    "body": [
      "mapGetters"
    ],
    "description": "just a word"
  },
  "mapActions": {
    "prefix": "mapActions",
    "body": [
      "mapActions"
    ],
    "description": "just a word"
  },
  "mapMutations": {
    "prefix": "mapMutations",
    "body": [
      "mapMutations"
    ],
    "description": "just a word"
  }
}
